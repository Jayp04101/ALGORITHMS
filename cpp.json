{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Competitive programming template":{
	"prefix": "my_template",
	"body": [
		"#include <bits/stdc++.h>",
		"#include<thread>",
		"using namespace std;",
		"#define inf 1000000007",
		"#define ll long long int",
		"#define vi vector<int>",
		"#define vb vector<bool>",
		"#define vc vector<char>",
		"#define vvc vector< vector<char> >",
		"#define vvi vector< vector<int> >",
		"#define vvb vector< vector<bool> >",
		"#define vvpii vector< vector< pair<int,int> > >",
		"#define vll vector<long long int>",
		"#define all(x) x.begin(),x.end()",
		"#define pii pair<int,int>",
		"#define pqpii priority_queue< pair<int,int> ,vector< pair<int,int> >,greater< pair<int,int> > >",
		"#define mii map<int,int>",
		"#define msi map<string,int>",
		"#define mmii multimap<int,int>",
		"#define mmsi multimap<string,int>",
		"#define umii unordered_map<int,int>",
		"#define umsi unordered_map<string,int>",
		"#define ummii unordered_multimap<int,int>",
		"#define ummsi unordered_multimap<string,int>",
		"#define f(i,a,b) for(int i = a; i < b; ++i)",
		"#define fr(i,a,b) for(int i = a; i > b; --i)", 
		"\n\n\n\n\n\n\n",
		"int main()",
		"{",
    	"\tios_base::sync_with_stdio(false);",
    	"\tcin.tie(NULL);",
    	"\tcout.tie(NULL);",
    	"\tint t;",
    	"\tcin>>t;",
    	"\twhile(t--)",
    	"\t{",
        "",
    	"\t}",
    	"\treturn 0;",
		"}"
	]
	},
	"ALGORITHMS_BINARY_EXPONENTIATION":{
		"prefix": "binary_exponentiation",
		"body": [
			"ll binary_exponentiation(const ll &a,const ll &n)",
			"{",
    		"\tif(n == 0)",
    		"\treturn 1;",
    		"\tif(n & 1)",
    		"\treturn (a % inf * binary_exponentiation((a % inf * a % inf) % inf,n / 2) % inf) % inf;",
    		"\treturn binary_exponentiation((a % inf * a % inf) % inf,n / 2) % inf;",
			"}"
		]
	},
	"ALGORITHMS_DSU_ROOT":{
		"prefix": "dsu_root",
		"body": [
			"int dsu_root(vi &vec,int i)",
			"{",
    		"\twhile(vec[i] != i)",
    		"\t{",
        	"\t\tvec[i] = vec[vec[i]];",
        	"\t\ti = vec[i];",
    		"\t}",
    		"\treturn i;",
			"}"
		]
	},
	"ALGORITHMS_DSU_UNION_FIND":{
		"prefix": "dsu_union_find",
		"body": [
			"void dsu_union_find(vi &arr,vi &size,int a,int b)",
			"{",
    		"\tint root_a = dsu_root(arr,a);",
    		"\tint root_b = dsu_root(arr,b);",
    		"\tif(root_a == root_b)",
        	"\treturn;",
    		"\tif(size[root_a] < size[root_b])",
    		"\t{",
        	"\t\tsize[root_b] += size[root_a];",
        	"\t\tarr[root_a] = root_b;",
    		"\t}",
    		"\telse",
    		"\t{",
        	"\t\tsize[root_a] += size[root_b];",
        	"\t\tarr[root_b] = root_a;",
    		"\t}",
			"}"
		]
	}
}
